import logging
import json
import os
from datetime import datetime
from pathlib import Path
from colorama import init, Fore, Style

init()

class CosmosLogger:
    def __init__(self, log_dir="logs", log_level="INFO"):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger("cosmos_automation")
        self.logger.setLevel(getattr(logging, log_level.upper()))
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã  
        self.logger.handlers.clear()
        
        # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        log_file = self.log_dir / f"cosmos_{datetime.now().strftime('%Y%m%d')}.log"
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.INFO)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        file_handler.setFormatter(formatter)
        console_handler.setFormatter(formatter)
        
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
        
    def log_wallet_start(self, wallet_name, balance):
        message = f"[{wallet_name}] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ë–∞–ª–∞–Ω—Å: {balance:,} uatom"
        self.logger.info(message)
        print(f"{Fore.CYAN}üè¶ {message}{Style.RESET_ALL}")
    
    def log_reward_withdrawal(self, wallet_name, rewards, tx_hash, success=True):
        status = "SUCCESS" if success else "FAILED"
        message = f"[{wallet_name}] –°–Ω—è—Ç–∏–µ –Ω–∞–≥—Ä–∞–¥: {rewards:,.2f} uatom - {status} - TX: {tx_hash}"
        self.logger.info(message)
        
        color = Fore.GREEN if success else Fore.RED
        print(f"{color}üéÅ {message}{Style.RESET_ALL}")
    
    def log_send_transaction(self, wallet_name, amount, target, exchange, tx_hash, success=True):
        status = "SUCCESS" if success else "FAILED"
        message = f"[{wallet_name}] –û—Ç–ø—Ä–∞–≤–∫–∞ {amount:,} uatom –Ω–∞ {exchange} - {status} - TX: {tx_hash}"
        self.logger.info(message)
        
        color = Fore.GREEN if success else Fore.RED
        print(f"{color}üí∏ {message}{Style.RESET_ALL}")
    
    def log_error(self, wallet_name, error_msg):
        message = f"[{wallet_name}] –û–®–ò–ë–ö–ê: {error_msg}"
        self.logger.error(message)
        print(f"{Fore.RED}‚ùå {message}{Style.RESET_ALL}")
    
    def log_gas_calculation(self, operation, gas_value):
        message = f"Gas —Ä–∞—Å—á–µ—Ç –¥–ª—è {operation}: {gas_value:,}"
        self.logger.info(message)
        print(f"{Fore.BLUE}‚õΩ {message}{Style.RESET_ALL}")
    
    def log_info(self, message):
        self.logger.info(message)
        print(f"{Fore.WHITE}‚ÑπÔ∏è {message}{Style.RESET_ALL}")
    
    def log_warning(self, message):
        self.logger.warning(message)
        print(f"{Fore.YELLOW}‚ö†Ô∏è  {message}{Style.RESET_ALL}")
    
    def log_success(self, message):
        self.logger.info(message)
        print(f"{Fore.GREEN}‚úÖ {message}{Style.RESET_ALL}")
    
    def export_daily_stats(self, stats_data):
        """–≠–∫—Å–ø–æ—Ä—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats_file = self.log_dir / f"stats_{datetime.now().strftime('%Y%m%d')}.json"
            
            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(stats_data, f, indent=2, ensure_ascii=False, default=str)
            
            self.log_success(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_file}")
        except Exception as e:
            self.log_error("SYSTEM", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
_logger_instance = None

def get_logger():
    global _logger_instance
    if _logger_instance is None:
        log_level = os.getenv('LOG_LEVEL', 'INFO')
        log_dir = os.getenv('LOG_DIR', 'logs')
        _logger_instance = CosmosLogger(log_dir, log_level)
    return _logger_instance